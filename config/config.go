package config

import (
	"github.com/kyaxcorp/go-helper/_struct"
	loggerConfig "github.com/kyaxcorp/go-logger/config"
)

type Config struct {
	// Should be in this format: 192.168.0.1:8080, localhost:8080 etc.. 0.0.0.0:8080
	IsEnabled   string `yaml:"is_enabled" mapstructure:"is_enabled" default:"yes"`
	Name        string
	Description string

	// Enable server status which will give information about the server
	EnableServerStatus string `yaml:"enable_server_status" mapstructure:"enable_server_status" default:"yes"`
	// Credentials for Status Access
	ServerStatusUsername string `yaml:"server_status_username" mapstructure:"server_status_username" default:"admin"`
	ServerStatusPassword string `yaml:"server_status_password" mapstructure:"server_status_password" default:"admin_password"`

	//
	EnableSSL string `yaml:"enable_ssl" mapstructure:"enable_ssl" default:"yes"`
	// This is the path where the ssl cert file is being read, if no path provided, then an autogenerated certificate
	//will be made and used
	SSLCertFilePath string `yaml:"ssl_cert_file_path" mapstructure:"ssl_cert_file_path"`
	// This is the path where the ssl key file is being read, if no path provided, then an autogenerated certificate
	//will be made and used
	SSLKeyFilePath string `yaml:"ssl_key_file_path" mapstructure:"ssl_key_file_path"`
	// Gives permission to autogenerate certificates if are missing
	SSLAutoGenerateCerts string `yaml:"ssl_auto_generate_certs" mapstructure:"ssl_auto_generate_certs" default:"yes"`

	// Allow Listening on HTTP only without encryption
	EnableUnsecure string `yaml:"enable_unsecure" mapstructure:"enable_unsecure" default:"yes"`

	// HTTP Listening
	ListeningAddresses []string `yaml:"listening_addresses" mapstructure:"listening_addresses"`
	// HTTPS Listening
	ListeningAddressesSSL []string `yaml:"listening_addresses_ssl" mapstructure:"listening_addresses_ssl"`

	// This is the logger configuration!
	Logger loggerConfig.Config
}

// DefaultConfig -> it will return the default config with default values
func DefaultConfig(configObj *Config) (Config, error) {
	if configObj == nil {
		configObj = &Config{}
	}
	var _err error
	// Set the default values for the object!
	_err = _struct.SetDefaultValues(configObj)
	if _err != nil {
		return *configObj, _err
	}
	// Setting logger defaults
	_err = _struct.SetDefaultValues(&configObj.Logger)
	if _err != nil {
		return *configObj, _err
	}

	return *configObj, _err
}
